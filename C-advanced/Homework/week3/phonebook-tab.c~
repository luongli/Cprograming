#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include "luong.h"

typedef struct{
  void *key;
  void *value;
}Entry;

#define BOOK_LENGTH 1000
#define EXIT '4'
#define INITIAL_SIZE 100
#define INCREMENTAL_SIZE 10

typedef struct{
  Entry *entries;
  int size, total;
  Entry (*makeNode)(void *, void *);
  int (*compare)(void *, void *);
} SymbolTable;


PhoneBook createPhoneBook()
{
  PhoneBook book;
  book.current = 0;
  book.total = INITIAL_SIZE;
  book.entries = (PhoneEntry*) malloc(sizeof(PhoneEntry)*INITIAL_SIZE);
  return book;
}


void extendBook(PhoneBook *book)
{
  PhoneEntry *p = book->entries;
  int original_size = book->total;
  
  p = (PhoneEntry *) realloc(p, original_size+INCREMENTAL_SIZE);
  
  if(p == NULL){
    printf("Fail to allocate memory\n");
    exit(1);
  }else{
    book->total += INCREMENTAL_SIZE;
  }

}


void dropPhoneBook(PhoneBook *book)
{
  free(book->entries);
}


int isFull(PhoneBook *book)
{
  return(book->current == book->total);
}


int getPhoneNumber(char *number, PhoneBook *book)
{
  PhoneEntry *p = book->entries;
  int len = book->total;
  int i;

  for(i = 0; i < len; i++){
    if(strcmp(number, p[i].number) == 0) return i;
  }

  return -1;
}


PhoneEntry createEntry(char *number, char *name)
{
  PhoneEntry tmp;
  strcpy(tmp.number, number);
  strcpy(tmp.name, name);
  return tmp;
}


void addPhoneNumber(char *number, char *name, PhoneBook *book)
{
  PhoneEntry tmp;
  PhoneEntry *p = book->entries;
  int current = book->current;
  int exist;

  /* search for the existing entry */
  exist = getPhoneNumber(number, book);
  if(exist == -1){
    /* if not exist */
    if(isFull(book)){
      /* if the book is full */
      /* increase the size of the book */
      extendBook(book);
      p[current] = createEntry(number, name);
      book->current++;
    }else{
      p[current] = createEntry(number, name);
      book->current += 1;
    }    

  }else{
    /* if exist, overwrite the existing one */
    book->entries[exist] = createEntry(number, name);
  }
  
}


char getMenu()
{
  char choice;
  printf("+===============================================+\n");
  printf("| 1. Add new phone entry                        |\n");
  printf("| 2. Search for a number                        |\n");
  printf("| 3. List all the contacts                      |\n");
  printf("| 4. Exit                                       |\n");
  printf("+===============================================+\n");
  printf("Your choice: ");
  scanf("%c", &choice);
  myfflush();
  return choice;
}


void displayTitle()
{
  printf("%-30s%-15s\n", "Name", "Number");
}

void displayEntry(PhoneEntry e)
{
  printf("%-30s%-15s\n", e.name, e.number);
}

int main()
{
  char choice;
  char name[80];
  char number[12];
  int found;
  PhoneBook book;
  int i;
  /* initialize phone book */
  book = createPhoneBook();

  do{
    choice = getMenu();
    switch(choice){

    case '1':
      printf("Enter the name: ");
      scanf("%[^\n]", name);
      myfflush();
      printf("Enter the number: ");
      scanf("%[^\n]", number);
      myfflush();
      addPhoneNumber(number, name, &book);
      printf("%d\n", book.total);
      break;

    case '2':
      printf("Enter the number you want to find: ");
      scanf("%[^\n]", number);
      myfflush();
      found = getPhoneNumber(number, &book);
      if(found == -1) printf("Not found\n");
      else{
	displayTitle();
	displayEntry(book.entries[found]);
      }      
      break;

    case '3':
      displayTitle();
      for(i = 0; i < book.current; i++){
	displayEntry(book.entries[i]);
      }
      break;

    case '4':
      dropPhoneBook(&book);
      break;
      
    default: printf("Invalid choice\n");
    }
  }while(choice != EXIT);
}
